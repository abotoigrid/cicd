name: CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      vm_public_ip:
        description: 'Public IP of the VM'
        required: true
        type: string
      db_endpoint:
        description: 'Endpoint of the Database'
        required: true
        type: string

jobs:
  # static-analysis:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Set up JDK
  #       uses: actions/setup-java@v3
  #       with:
  #         java-version: '17'
  #         distribution: 'temurin'
  #     - name: Run static analysis
  #       run: mvn checkstyle:check

  # test:
  #   runs-on: ubuntu-latest
  #   #needs: static-analysis
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Set up JDK
  #       uses: actions/setup-java@v3
  #       with:
  #         java-version: '17'
  #         distribution: 'temurin'
  #     - name: Cache Maven packages
  #       uses: actions/cache@v4
  #       with:
  #         path: ~/.m2/repository
  #         key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}-${{ github.base_ref }}
  #         restore-keys: |
  #           ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}-
  #     - name: Run Tests
  #       run: mvn -B -e test

  build-and-cache-artifact:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}-${{ github.base_ref }}
          restore-keys: |
            ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}-
      - name: Build with Maven
        run: mvn -B -e package -DskipTests
      - name: Store build artifact
        uses: actions/upload-artifact@v4
        with:
          name: petclinic-app
          path: target/*.jar

      
  create-artifact-pr:
    if: github.ref != 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: build-and-cache-artifact
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: petclinic-app
          path: target
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Construct Docker tag
        id: set_docker_tag
        run: |
          TAG="ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:${{ github.sha }}"
          echo "docker_tag=$TAG" >> $GITHUB_OUTPUT
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
            registry: ghcr.io
            username: ${{ github.repository_owner }}
            password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.set_docker_tag.outputs.docker_tag }}

  create-artifact-main:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: build-and-cache-artifact
    permissions:
      contents: write
      packages: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: petclinic-app
          path: target

      - name: Bump version and push tag
        uses: anothrNick/github-tag-action@v1
        id: versioning
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEFAULT_BUMP: minor
          WITH_V: false 
          RELEASE_BRANCHES: main

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Construct Docker tag
        id: set_docker_tag
        run: |
          TAG="ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:${{ steps.versioning.outputs.new_tag }}"
          echo "docker_tag=$TAG" >> $GITHUB_OUTPUT

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.set_docker_tag.outputs.docker_tag }}

  deploy:
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    needs: create-artifact-main
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install SSH Key and Configure SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Construct Docker tag
        id: set_docker_tag
        run: |
          OWNER_LOWERCASE=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          TAG="ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:$(git describe --tags $(git rev-list --tags --max-count=1))"
          echo "docker_tag=$TAG" >> $GITHUB_OUTPUT

      - name: Deploy to Server
        env:
          GHCR_PAT: ${{ secrets.GHCR_PULL_TOKEN }}
          VM_PUBLIC_IP: ${{ github.event.inputs.vm_public_ip }}
          DB_ENDPOINT: ${{ github.event.inputs.db_endpoint }}
        run: |
          ssh -o "StrictHostKeyChecking no" ${{ secrets.SSH_USER }}@$VM_PUBLIC_IP << EOF
            # Log in to ghcr.io
            echo "$GHCR_PAT" | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin
            # Check if the container exists and stop/remove it
            if docker ps -a --format '{{.Names}}' | grep -q 'petclinic'; then
              docker stop petclinic
              docker rm petclinic
            fi
            # Pull the latest image
            docker pull ${{ steps.set_docker_tag.outputs.docker_tag }}

            # Run the new container
            docker run -d --name petclinic -p 8080:8080 \
              -e SPRING_DATASOURCE_URL=jdbc:mysql://${{secrets.MYSQL_HOST}}:3306/${{secrets.MYSQL_DATABASE}}?useSSL=false \
              -e SPRING_DATASOURCE_USERNAME=${{ secrets.MYSQL_USER }} \
              -e SPRING_DATASOURCE_PASSWORD=${{ secrets.MYSQL_PASSWORD }} \
              -e SPRING_PROFILES_ACTIVE=mysql \
              ${{ steps.set_docker_tag.outputs.docker_tag }}

            # Print application URL
            echo "Application deployed at http://${{ secrets.SSH_HOST }}:8080"
          EOF

